<?php

/**
 * @file
 * Provides a "petition" node type.
 *
 * @author Samuel Gauvain <gauvain@kth.se>
 * @author Dan Smith <dan.smith@codeenigma.com>
 */


/**
 * Implements hook_signaturedisplay_info().
 */
function petition_signaturedisplay_info() {

  // The 0none means that the signature will not be displayed to the public. The petition maintainer will be able to see it, the function to dispaly it is the one of 1default.
  $signaturedisplay_info['0none'] = array(
    'name' => t('Do not display the signatures to the public'),
    'default' => FALSE, // If True, the petition nodes created on the website will have this display mode as the default.
    'callback' => 'default_signature_display', // Name of the function that returns the signatures.
  );

  // The 1default is the basic display of this moudle.
  $signaturedisplay_info['1default'] = array(
    'name' => t('Normal display'),
    'default' => FALSE, // If True, the petition nodes created on the website will have this display mode as the default.
    'callback' => 'default_signature_display', // Name of the function that returns the signatures.
  );
  return $signaturedisplay_info;
}

/**
 * Implements hook_node_info().
 */
function petition_node_info() {
  // We return an array since a module can define multiple node types.
  // We only define one node type: petition.
  return array(
    'petition' => array(
      'name' => t('Petition'),
      'base' => 'petition',
      'description' => t('Create online petitions.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_perm().
 */
function petition_permission() {
  return array(
    "sign petitions" => array(
      'title' => t("Sign petitions"),
    ),
    "create petitions" => array(
      'title' => t("Create petitions"),
    ),
    "edit own petition" => array(
      'title' => t("Edit own petitions"),
    ),
    "edit petitions" => array(
      'title' => t("Edit any petitions"),
    ),
    "administer petitions" => array(
      'title' => t("Administer petitions"),
    ),
    "administer own petition" => array(
      'title' => t("Administer own petitions"),
    ),
    "clear petition results" => array(
      'title' => t("Clear petition results"),
    ),
    "view signatures" => array(
      'title' => t("View signatures"),
    ),
  );
}

/**
 * Implements hook_access().
 */
function petition_node_access($node, $op, $account) {
  switch ($op) {
    case "create":
      return user_access("create petitions", $account);
    case "update":
    case "delete":
      return (user_access("edit petitions", $account) || (user_access("edit own petition", $account) && ($account->uid == $node->uid)));
  }
}

/**
 * Menu loader callback.
 */
function petition_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!isset($node->type) || $node->type != 'petition') {
    return FALSE;
  }
  return $node;
}

/**
 * Menu loader callback.
 */
function petition_signature_load($cid) {
  if (!is_numeric($cid)) {
    return FALSE;
  }
  $result = db_query('SELECT cid FROM {petition_signatures} WHERE cid = :cid', array(':cid' => $cid));
  $entry = db_fetch_object($result);

  if (!isset($entry->cid)) {
    return FALSE;
  }
  return $cid;
}

/**
 * Implements hook_menu().
 */
function petition_menu() {
  global $user;
  $items = array();

  // Petition listings.
  $items['admin/content/petition'] = array(
    'title' => 'Petition List',
    'page callback' => 'petition_content_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer petitions'),
    'description' => 'View and edit all the available petitions on your site',
    'type' => MENU_NORMAL_ITEM,
  );

  // Petition list per user.
  $items['user/%user/petition'] = array(
    'title' => 'Petition list',
    'page callback' => 'petition_content_user_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('create petitions'),
    'description' => 'View and edit your petitions',
    'type' => MENU_LOCAL_TASK,
  );

  // Petition admin settings.
  $items['admin/config/petition'] = array(
    'title' => 'Petition Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petition_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer petitions'),
    'description' => 'global configuration of the petition settings',
    'type' => MENU_NORMAL_ITEM,
  );

  // 'Petition_confirmation_page' CALLBABCK, to confirm the signatures.
  $items['petition/signature/confirmation'] = array(
    'title' => 'signature confirmation',
    'page callback' => 'petition_confirmation_page',
    'access callback' => 'user_access',
    'access arguments' => array('sign petitions'),
    'type' => MENU_CALLBACK,
  );
  // Petition view signatures.
  $items['node/%petition_menu/signatures'] = array(
    'title' => 'Signatures',
    'page callback' => 'petition_signature_page',
    'page arguments' => array(1),
    'access callback' => 'petition_signature_access',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  // Petition download results. Only for the superbosses or the petition maintainer.
  $items['node/%petition_menu/result'] = array(
    'title' => 'Download results',
    'page callback' => 'petition_result_page',
    'page arguments' => array(1),
    'access callback' => 'petition_maintainer_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  // Clear the signatures.
  $items['node/%petition_menu/clear'] = array(
    'title' => 'Clear signatures',
    'page callback' => 'petition_clear_signatures',
    'page arguments' => array(1),
    'access callback' => 'petition_clearsignature_access',
    'access arguments' => array(1),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );

  // Administer the signatures.
  $items['node/%petition_menu/signatures-admin'] = array(
    'title' => 'Administer Signatures',
    'page callback' => 'petition_signatures_admin_page',
    'page arguments' => array(1),
    'access callback' => 'petition_maintainer_access',
    'access arguments' => array(1),
    'file' => 'petition-signatures-admin.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  // Signature edit page.
  $items['signature/edit/%petition_signature'] = array(
    'title' => 'Edit signature',
    'page callback' => 'petition_signatures_edit_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer petitions'),
    'file' => 'petition-signatures-admin.inc',
  );

  return $items;
}

function petition_signature_access($node) {
  global $user;
  if ($node->display_mode == '0none') {
    $access = user_access('edit own petition', $user) && ($user->uid == $node->uid);
  }
  else {
    if ($node->hide_signatures_tab) {
      // Hide menu item.
      $access = FALSE;
    }
    else {
      // Show menu item if node can be viewed.
      $access = node_access('view', $node, $user);
    }
  }
  return $access;
}

function petition_maintainer_access($node) {
  global $user;
  if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
    $access = FALSE;
  }
  else {
    $access = (user_access('administer own petition', $user) && ($user->uid == $node->uid)) || user_access('administer petitions', $user);
  }
  return $access;
}

function petition_clearsignature_access($node) {
  global $user;
  if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
    $access = FALSE;
  }
  else {
    $access = (user_access('clear petition results', $user) && user_access('administer own petition', $user) && ($user->uid == $node->uid));
  }
  return $access;
}

/**
 * petition_admin_settings().
 */
function petition_admin_settings($form, &$form_state) {
  // petitions fields
  $form['petition_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Petitions fields'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -8,
  );
  $form['petition_fields']['petition_signature_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields included in the signature form'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Choose the signature fields a petition author should be allowed to set in their petition.'),
    '#weight' => 0,
  );
  $form['petition_fields']['petition_signature_fields']['petition_signature_fields_form'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Report fields'),
    '#options' => array(
      'name' => t('Surname'),
      'firstname' => t('First name'),
      'title' => t('Other (activity, status etc)'),
      'profession' => t('Profession'),
      'institution' => t('Institution'),
      'website' => t('Website'),
      'address' => t('Address'),
      'zip' => t('ZIP code'),
      'town' => t('Town'),
      'country' => t('Country'),
      'tel' => t('Phone number'),
      'comment' => t('Comment'),
      'canbe_informed' => t('Accept to be informed of the campaign'),
    ),
    '#default_value' => variable_get('petition_signature_fields_form', array('name', 'firstname', 'title', 'zip', 'town', 'country', 'canbe_informed')),
    '#weight' => 1,
  );
  $form['petition_fields']['petition_report_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields included in the petition reports'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t("Choose the fields you want to include in the exportable reports. You might not want the author to be able to export all the collected fields (ie the petitioner's email address) in order to protect the petitioners' privacy "),
    '#weight' => 1,
  );
  $form['petition_fields']['petition_report_fields']['petition_report_fields_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('included fields'),
    '#options' => array(
      'position' => t('Signature position'),
      'name' => t('Surname'),
      'firstname' => t('First name'),
      'title' => t('Other (activity, status etc)'),
      'profession' => t('Profession'),
      'institution' => t('Instituion'),
      'website' => t('Website'),
      'address' => t('Address'),
      'zip' => t('ZIP code'),
      'town' => t('Town'),
      'country' => t('Country'),
      'tel' => t('Phone number'),
      'email' => t('Email'),
      'comment' => t('Comment'),
      'canbe_informed' => t('Accept to be informed of the campaign'),
      'language' => t('language'),
    ),
    '#default_value' => variable_get('petition_report_fields_fields', array('position', 'name', 'firstname', 'title', 'zip', 'town', 'country', 'canbe_informed', 'language')),
    '#required' => TRUE,
    '#weight' => 1,
  );
  // Email to petition maintainer.
  $form['petition_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Petition emails'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -7,
  );
  $form['petition_email']['confirmation_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Signature validation by email'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -8,
  );
  $form['petition_email']['confirmation_email']['petition_email_confirmation_required'] = array(
    '#type' => 'checkbox',
    '#title' => t('Confirmation email required'),
    '#default_value' => variable_get('petition_email_confirmation_required', TRUE),
  );
  $form['petition_email']['update_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Petition email for regular update on the amount of signatures'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -7,
  );

  $defaultsubject = _petition_getdefault("update_email_subject");
  $form['petition_email']['update_email']['petition_emailsubject_to_maintainer'] = array(
    '#type' => 'textfield',
    '#title' => t('Email subject to maintainer'),
    '#default_value' => variable_get('petition_emailsubject_to_maintainer', $defaultsubject),
    '#description' => t('Customized email subject to a petition author to tell them how many signatures the petition has reached.') . _petition_getdefault("description_maintainer_mail"),
    '#weight' => 1,
  );
  $defaultbody = _petition_getdefault("update_email_body");
  $form['petition_email']['update_email']['petition_emailbody_to_maintainer'] = array(
    '#type' => 'textarea',
    '#title' => t('Email message to maintainer'),
    '#default_value' => variable_get('petition_emailbody_to_maintainer', $defaultbody),
    '#description' => t('Customized email body to a petition author to tell them how many signatures the petition has reached.') . _petition_getdefault("description_maintainer_mail"),
    '#weight' => 1,
  );

  $form['petition_email']['campaign_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Petition email announcing the end of the campaign'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -5,
  );

  $defaultsubject = _petition_getdefault("campaign_is_over_email_subject");
  $form['petition_email']['campaign_email']['campaign_emailsubject_to_maintainer'] = array(
    '#type' => 'textfield',
    '#title' => t('Email subject to maintainer'),
    '#default_value' => variable_get('campaign_emailsubject_to_maintainer', $defaultsubject),
    '#description' => t('Customized email subject to a petition author to inform them the petition campaign is over.') . _petition_getdefault("description_maintainer_mail"),
    '#weight' => 1,
  );
  $defaultbody = _petition_getdefault("campaing_is_over_email_body");
  $form['petition_email']['campaign_email']['campaign_emailbody_to_maintainer'] = array(
    '#type' => 'textarea',
    '#title' => t('Email message to maintainer'),
    '#default_value' => variable_get('campaign_emailbody_to_maintainer', $defaultbody),
    '#description' => t('Customized email subject to a petition author to inform them the petition campaign is over.') . _petition_getdefault("description_maintainer_mail"),
    '#weight' => 1,
  );

  // Other settings.
  $form['petition_other'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -8,
  );
  $form['petition_other']['petition_signature_number'] = array(
    '#type' => 'select',
    '#title' => t('Number of signatures displayed per page'),
    '#options' => array(
      25 => '25',
      50 => '50',
      75 => '75',
      100 => '100',
      125 => '125',
      150 => '150',
      175 => '175',
      200 => '200',
      225 => '225',
      250 => '250',
      275 => '275',
      200 => '200',
    ),
    '#default_value' => variable_get('petition_signature_number', 50),
    '#weight' => 1,
  );

  return system_settings_form($form);
}


/**
 * petition_content_page().
 * "view and edit all available petitions on the site";
 */
function petition_content_page() {
  $header = array(
    t('Title'),
    array(
      'data' => t('View'),
      'colspan' => '3',
    ),
    array(
      'data' => t('Operations'),
      'colspan' => '2',
    ),
  );

  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'uid', 'title'))
    ->condition('type', 'petition')
    ->addTag('node_access')
    ->execute();

  while ($node = $result->fetchObject()) {
    $row = array(l($node->title, 'node/' . $node->nid));
    $row[] = user_access('sign petitions') ? l(t('Signatures'), 'node/' . $node->nid . '/signatures') : '';
    $row[] = user_access('edit own petitions') ? l(t('Result'), 'node/' . $node->nid . '/result') : '';
    $row[] = node_access('update', $node) ? l(t('Edit'), 'node/' . $node->nid . '/edit') : '';
    $row[] = user_access('edit own petitions') ? l(t('Clear'), 'node/' . $node->nid . '/clear') : '';
    $rows[] = $row;
  }

  $content = theme('table', array('header' => $header, 'rows' => $rows));
  drupal_set_title(t('Petition list'));
  return $content;
}

/**
 * petition_content_user_page().
 * "view and edit all the petitions of a user";
 */
function petition_content_user_page($user) {
  $header = array(
    t('Title'),
    array(
      'data' => t('View'),
      'colspan' => '3',
    ),
    array(
      'data' => t('Operations'),
      'colspan' => '2',
    ),
  );

  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'petition')
    ->condition('uid', $user->uid)
    ->addTag('node_access')
    ->execute();

  while ($node = $result->fetchObject()) {
    $row = array(l($node->title, 'node/' . $node->nid));
    $row[] = user_access('sign petitions') ? l(t('Signatures'), 'node/' . $node->nid . '/signatures') : '';
    $row[] = user_access('edit own petitions') ? l(t('Result'), 'node/' . $node->nid . '/result') : '';
    $row[] = node_access('update', $node) ? l(t('Edit'), 'node/' . $node->nid . '/edit') : '';
    $row[] = user_access('edit own petitions') ? l(t('Clear'), 'node/' . $node->nid . '/clear') : '';
    $rows[] = $row;
  }

  $content = theme('table', array('header' => $header, 'rows' => $rows));
  drupal_set_title(t('My petitions'));
  return $content;
}

/**
 * Implements hook_user_view().
 */
function petition_user_view($account, $view_mode) {
  if (TRUE && user_access('create petitions', $user)) {
    $user->content['summary']['petition'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('My Petitions'),
      '#value' => l(t('View and edit my petitions'), 'user/' . $user->uid . '/petition'),
    );
    return array(t('My petitions') => $items);
  }
}

/**
 * Hook_user to add the personal petition page to the user view.
 */
function petition_user_OLD($op, &$edit, &$user) { }

/**
 * Implements hook_form().
 * form for the creation of the petition.
 * enable to choose country restriction and add different languages.
 */
function petition_form($node, &$form_state) {

  // If this is a translation, only the email settings should appear.
  if (isset($_GET['translation']) || (isset($node->tnid) && is_numeric($node->tnid) && $node->tnid > 0 && $node->nid != $node->tnid)) {
    if (is_numeric($_GET['translation']) && $_GET['translation'] > 0) {
      $translation_source = node_load($_GET['translation']);
    }
    else {
      $translation_source = node_load($node->tnid);
    }

    $form['translated_emails'] = array(
      '#type' => 'fieldset',
      '#title' => t('Translation of the body and the subject of the confirmation email'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -2,
    );

    if (isset($node->tsubjects[$node->language])) {
      $defaultsubject = $node->tsubjects[$node->language];
    }
    else {
      $defaultsubject = _petition_getdefault("confirmation_email_subject");
      $defaultsubject = t($defaultsubject, array(), array('langcode' => $node->language));
    }
    $languages = language_list();
    $form['translated_emails']['original_email_subject'] = array(
      '#type' => 'textfield',
      '#title' => t("Original email subject"),
      '#description' => t("The subject of the confirmation email sent to the petitioner in @language", array('@language' => $languages[$translation_source->language]->name)),
      '#value' => $translation_source->tsubjects[$translation_source->language],
      '#weight' => 1,
      '#disabled' => TRUE,
    );

    $form['translated_emails']['email_subject'] = array(
      '#type' => 'textfield',
      '#title' => t("Translation of the email subject"),
      '#description' => t("Translation of the subject of the email sent to the petitioner.") . _petition_getdefault("description_confirmation_mail"),
      '#default_value' => $defaultsubject,
      '#weight' => 2,
    );
    if (isset($node->tbodies[$node->language])) {
      $defaultbody = $node->tbodies[$node->language];
    }
    else {
      $defaultbody = _petition_getdefault("confirmation_email_body");
      $defaultbody = t($defaultbody, array(), array('langcode' => $node->language));
    }

    $form['translated_emails']['original_email_body'] = array(
      '#type' => 'textarea',
      '#title' => t("Original email body"),
      '#description' => t("The body of the confirmation email sent to the petitioner in @language", array('@language' => $languages[$translation_source->language]->name)),
      '#value' => $translation_source->tbodies[$translation_source->language],
      '#weight' => 3,
      '#disabled' => TRUE,
    );


    $form['translated_emails']['email_body'] = array(
      '#type' => 'textarea',
      '#title' => t("Translation of the email body"),
      '#description' => t("Translation of the body of the email sent to the petitioner.") . _petition_getdefault("description_confirmation_mail"),
      '#default_value' => $defaultbody,
      '#weight' => 4,
    );

    $form['tnid'] = array(
      '#type' => 'hidden',
      '#value' => $translation_source->tnid == 0 ? $translation_source->nid : $translation_source->tnid,
      '#weight' => 4,
    );
  }

  // The petition from should appear if this is not a translation.
  if ((!isset($node->tnid) || !is_numeric($node->tnid) || $node->tnid == 0 || $node->nid == $node->tnid) && !isset($_GET['translation'])) {

    $nodes = array();
    $nodes[] = $node;
    petition_load($nodes);

    $form['petition'] = array(
      '#type' => 'fieldset',
      '#title' => t('Petition settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -2,
    );

    // Petition settings : email of the petition maintainer as well as email frequency.
    $form['petition']['petition_node_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced petition settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -3,
    );

    $form['petition']['petition_node_settings']['hide_signatures_tab'] = array(
      '#type' => 'checkbox',
      '#title' => t("Hide signature tab"),
      '#description' => t("When checked the signature tab of the petition node will not be visible"),
      '#default_value' => isset($node->hide_signatures_tab) ? $node->hide_signatures_tab : '',
      '#weight' => 0,
    );

    $maintainer_email = isset($node->maintainer_email) ? $node->maintainer_email : NULL;
    $form['petition']['petition_node_settings']['maintainer_email'] = array(
      '#type' => 'textfield',
      '#title' => t("Author's email"),
      '#description' => t("Enter the email where you wish to receive regular updates concerning the amount of signatures on your petition. if no email address is entered, the emails will be sent to your account's email"),
      '#default_value' => $maintainer_email,
      '#weight' => 1,
    );

    $form['petition']['petition_node_settings']['update_frequency'] = array(
      '#type' => 'textfield',
      '#title' => t("Email alert frequency"),
      '#description' => t("Enter the frequency with wich you wish to receive email alerts"),
      '#default_value' => isset($node->update_frequency) ? $node->update_frequency : '',
      '#weight' => 2,
    );

    if (isset($node->email_subject)) {
      $defaultsubject = $node->email_subject;
    }
    else {
      $defaultsubject = _petition_getdefault("confirmation_email_subject");
    }

    $form['petition']['petition_node_settings']['email_subject'] = array(
      '#type' => 'textfield',
      '#title' => t("Customized subject of the mail sent to the petitioner"),
      '#description' => t("Customized email subject to the petitioner.") . _petition_getdefault("description_confirmation_mail"),
      '#default_value' => $defaultsubject,
      '#weight' => 3,
    );

    if (isset($node->email_body)) {
      $defaultbody = $node->email_body;
    }
    else {
      $defaultbody = _petition_getdefault("confirmation_email_body");
    }

    $form['petition']['petition_node_settings']['email_body'] = array(
      '#type' => 'textarea',
      '#title' => t("Customized body of the email sent to the signer"),
      '#description' => t("Customized email body to the petitioner.") . _petition_getdefault("description_confirmation_mail"),
      '#default_value' => $defaultbody,
      '#weight' => 4,
    );
    $optionfields = variable_get('petition_signature_fields_form', array('name', 'firstname', 'title', 'address', 'zip', 'town', 'country', 'canbe_informed'));
    $options_signaturefields = array();
    foreach ($optionfields as $field) {
      if ($field != '0') {
        $options_signaturefields[$field] = $field;
      }
    }
    if (isset($node->optional_fields) && is_array($node->optional_fields) && !empty($node->optional_fields)) {
      $defaultoptionalfields = $node->optional_fields;
    }
    else {
      $defaultoptionalfields = variable_get('petition_signature_fields_form', array('name', 'firstname', 'title', 'address', 'zip', 'town', 'country', 'canbe_informed'));
    }
    $form['petition']['petition_node_settings']['optional_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Signature fields"),
      '#description' => 'Choose what fields to be included in the petition .',
      '#options' => $options_signaturefields,
      '#default_value' => $defaultoptionalfields,
      '#weight' => 5,
    );

    if (isset($node->required_fields) && is_array($node->required_fields) && !empty($node->required_fields)) {
      $defaultrequiredfields = $node->required_fields;
    }
    else {
      $defaultrequiredfields = variable_get('petition_signature_fields_form', array('name', 'firstname', 'zip', 'town', 'country'));
    }
    $form['petition']['petition_node_settings']['required_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Signature required fields"),
      '#description' => 'Choose which fields are required in the petition.',
      '#options' => $options_signaturefields,
      '#default_value' => $defaultrequiredfields,
      '#weight' => 6,
    );

    $optiondisplay = variable_get('petition_report_fields_fields', array('position', 'name', 'firstname', 'title', 'zip', 'town', 'country'));
    $options_displayfields = array();
    foreach ($optiondisplay as $field) {
      if ($field != '0') {
        $options_displayfields[$field] = $field;
      }
    }
    if (isset($node->display_fields) && is_array($node->display_fields) && !empty($node->display_fields)) {
      $defaultdisplayfields = $node->display_fields;
    }
    else {
      $defaultdisplayfields = variable_get('petition_report_fields_fields', array('name', 'firstname', 'title', 'zip', 'town', 'country'));
    }
    $form['petition']['petition_node_settings']['display_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Fields displayed in the signature overview"),
      '#description' => 'Choose which fields you want to display on the signature results page.',
      '#options' => $options_displayfields,
      '#default_value' => $defaultdisplayfields,
      '#weight' => 7,
    );

    $optiondisplay = array();
    $displayhook = module_invoke_all('signaturedisplay_info');
    foreach ($displayhook as $key => $item) {
      $optiondisplay[$key] = $item['name'];
      if ($key == '1default' | $item['default']) {
        $display_mode = $key;
      }
    }

    $display_mode = isset($node->display_mode) ? $node->display_mode : $display_mode;
    $form['petition']['petition_node_settings']['display_mode'] = array(
      '#type' => 'select',
      '#title' => t('Display mode'),
      '#options' => $optiondisplay,
      '#default_value' => $display_mode,
      '#weight' => 8,
    );

    $form['petition']['activation_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Activate / inactivate the signature form'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -2,
    );

    $activation = isset($node->activation) ? $node->activation : 1;
    $form['petition']['activation_settings']['activation'] = array(
      '#type' => 'checkbox',
      '#title' => t('Activate the signature form'),
      '#default_value' => $activation,
      '#description' => t('Uncheck this box if you want to inactivate the signature form to stop people from signing this petition'),
      '#weight' => 1,
    );

    if (isset($node->inactivation_message)) {
      $inactivation_message = $node->inactivation_message;
    }
    else {
      $inactivation_message = "The period for signing this petition is now over.";
    }

    $form['petition']['activation_settings']['inactivation_message'] = array(
      '#type' => 'textarea',
      '#title' => t("Inactivation message"),
      '#description' => t("Customized message to be displayed instead of the signature form to inform that the petition can no longer be signed. You can decide to empty it"),
      '#default_value' => $inactivation_message,
      '#weight' => 4,
    );

    $form['petition']['campaign_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Campaign settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -1,
    );

    $form['petition']['campaign_settings']['limit_date'] = array(
      '#type' => 'textfield',
      '#title' => t("Limit Date"),
      '#description' => t('Format: %time. Enter the end date of the petition campaign.', array('%time' => !empty($node->date) ? $node->date : format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s O'))),
      '#default_value' => isset($node->limit_date) && !empty($node->limit_date) ? format_date($node->limit_date, 'custom', 'Y-m-d H:i:s O') : '',
      '#weight' => 1,
    );

    $form['petition']['campaign_settings']['signature_goal'] = array(
      '#type' => 'textfield',
      '#title' => t("signature goal"),
      '#description' => t('Enter the target number of signatures to reach for this petition campaign'),
      '#default_value' => isset($node->signature_goal) ? $node->signature_goal : '',
      '#weight' => 2,
    );

    $form['petition']['campaign_settings']['campaign_settings'] = array(
      '#type' => 'radios',
      '#options' => array(t('none'), t('time based'), t('goal based')),
      '#title' => t("campaign settings"),
      '#description' => t('Tell on which criteria the campaign should be set (time based vs goal based) - choose none if you want to have a petition running for ever. if you choose a campign mode, you will be informed per email when the campaign is over.'),
      '#default_value' => isset($node->campaign_settings) ? $node->campaign_settings : '',
      '#weight' => 3,
    );
    $form['petition']['campaign_settings']['auto_inactivation'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatically inactivate the signature form'),
      '#default_value' => isset($node->auto_inactivation) ? $node->auto_inactivation : '',
      '#description' => t('Check this box if you want the petition form to be automatically inactivated when the campaign is over. Enter the message you want to display instead of the form then in the above section'),
      '#weight' => 4,
    );
    $form['petition']['manually_collected_signatures'] = array(
      '#type' => 'fieldset',
      '#title' => t('manually collected signatures'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 0,
    );

    $form['petition']['manually_collected_signatures']['manual_signatures'] = array(
      '#type' => 'textarea',
      '#title' => t("Manually Collected Signatures"),
      '#description' => t("<p>You can enter manually collected signatures to have them display with the electronically collected signatures. </p><p>Enter one signature per line with the following structure: </p>
                          <p>'name'; 'firstname'; 'self-description'; 'address'; 'zip-code'; 'town'; 'country_code2'; 'tel'; 'email address'; 'canbe_informed'; 'language' </p>
                          <p>example: </p>
                          <p>Van den Brugh; Peter; ; Parisstraat 23; 5676; Antwerpen; NL; ; Peter456@hotmail.be; 0; nl </p>
                          <p>Please note each field is separated with a semi-colon ';'. There is no semi colon after the last field of the line i.e the language!
                          Leave a space between semi-colons if the field is empty.</p>
                          "),
      '#default_value' => isset($node->manual_signatures) ? $node->manual_signatures : '',
      '#weight' => 4,
    );

  }
  // End of petition specific setting.

  $type = node_type_get_type($node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }

  return $form;
}

/**
 * Implements hook_load().
 */
function petition_load(&$nodes) {
  foreach ($nodes as $node) {
    if ($node->type == 'petition' && isset($node->nid) && is_numeric($node->nid) && $node->nid > 0) {
      // If the petition is a translation, load the information from the original version instead.
      // Petition settings can only be edited on the original petition node.
      if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
        $nid = $node->tnid;
      }
      else {
        $nid = $node->nid;
      }

      $petition = db_select('petition', 'p')
        ->fields('p')
        ->condition('nid', $nid)
        ->execute()
        ->fetchObject();

      $node->maintainer_email = $petition->pemail;
      $node->update_frequency = $petition->pfreq;
      $node->hide_signatures_tab = $petition->hide_signatures_tab;
      $node->optional_fields =  unserialize($petition->poptfields);
      $node->required_fields =  unserialize($petition->reqfields);
      $node->email_subject = $petition->emailsubject;
      $node->email_body = $petition->emailbody;
      $node->display_fields = unserialize($petition->presfields);
      $node->display_mode = $petition->display_mode;
      $node->signatures = $petition->signatures;
      $node->activation = $petition->activation;
      $node->inactivation_message = $petition->inactivation_message;

      $node->limit_date = $petition->limit_date;
      $node->signature_goal = $petition->signature_goal;
      $node->campaign_settings = $petition->campaign_settings;
      $node->auto_inactivation = $petition->auto_inactivation;

      // Loading the translated version of the emails.
      $node->tsubjects = array();
      $node->tbodies = array();
      $tnid = $node->tnid == 0 ? $node->nid : $node->tnid;

      $result = db_select('petition_translation', 'pt')
        ->fields('pt')
        ->condition('tnid', $tnid)
        ->execute();
      while ($translations = $result->fetchObject()) {
        $node->tsubjects[$translations->language] = $translations->tsubject;
        $node->tbodies[$translations->language] = $translations->tbody;
      }


      // Small checking function, to convert the old display mode settings to the new one.
      if (is_numeric($node->display_mode)) {
        $convertarray = array('0none', '1default');
        $node->display_mode = $convertarray[$node->display_mode];
      }
      if (is_null($node->display_mode)) {
        $node->display_mode = '1default';
      }
    }
  }
}

/**
 * Implements hook_insert().
 */
function petition_insert($node) {
  if ($node->type != 'petition') {
    return;
  }

  $language = db_query("SELECT language FROM {node} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  $tnid = db_query("SELECT tnid FROM {node} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  $tnid = $tnid == 0 ? $node->nid : $tnid;
  // If language set, save the mail settings in the petitiontranslation table.
  if (!empty($language) AND $tnid > 0) {
    $id = db_insert('petition_translation')
      ->fields(array(
          'nid' => $node->nid,
          'tnid' => $tnid,
          'language' => $language,
          'tsubject' => $node->email_subject,
          'tbody' => $node->email_body,
        ))
      ->execute();
  }

  // If the original version of the petition, save the other settings.
  if (!is_numeric($node->tnid) OR $node->tnid == 0 OR $node->nid == $node->tnid) {

    $node->signatures = db_query("SELECT COUNT(cid) FROM {petition_signatures} WHERE nid = :nid AND confirmed = :confirmed", array(':nid' => $node->nid, ':confirmed' => 1))->fetchField();
    if (!empty($node->limit_date) && strtotime($node->limit_date) > 0) {
      $node->limit_date = strtotime($node->limit_date);
    }

    $id = db_insert('petition')
      ->fields(array(
          'nid' => $node->nid,
          'pemail' => $node->maintainer_email,
          'pfreq' => (int) $node->update_frequency,
          'poptfields' => serialize($node->optional_fields),
          'reqfields' => serialize($node->required_fields),
          'emailsubject' => $node->email_subject,
          'emailbody' => $node->email_body,
          'presfields' => serialize($node->display_fields),
          'display_mode' => $node->display_mode,
          'activation' => (int) $node->activation,
          'inactivation_message' => $node->inactivation_message,
          'signatures' => (int) $node->signatures,
          'limit_date' => (int) $node->limit_date,
          'signature_goal' => (int) $node->signature_goal,
          'campaign_settings' => (int) $node->campaign_settings,
          'auto_inactivation' => (int) $node->auto_inactivation,
          'hide_signatures_tab' => (int) $node->hide_signatures_tab,
        ))
      ->execute();
    if ($node->manual_signatures != '') {
      $signatures = explode("\n", $node->manual_signatures);
      $fields = array('name', 'firstname', 'title', 'address', 'zip', 'town', 'country', 'tel', 'email', 'canbe_informed', 'language');

      if (is_array($signatures)) {
        foreach ($signatures as $signature_string) {
          $signature_string = str_replace("; ", ";", check_plain($signature_string));
          $signature_fields = explode(";", $signature_string);
          $i = 0;
          $signature = array();
          // Prepare the signature.
          if (count($fields) != count($signature_fields)) {
            drupal_set_message(t("Manual signature @signature_string could not be saved. Check the structure.", array('@signature_string' => $signature_string)));
          }
          else {
            foreach ($signature_fields as $signature_field) {
              $signature[$fields[$i]] = $signature_field;
              $i++;
            }
            // Enter the signature in the table.
            // Get the cid.
            $signature['cid'] = db_query('SELECT MAX(cid) FROM {petition_signatures}')->fetchField() + 1;
            // Get the position of the new signature in the petition and insert it.
            $position = db_query("SELECT MAX(position) FROM {petition_signatures} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
            $position += 1;

            // Give a hash as manual.
            $signature['hash'] = 'manual';
            $signature['confirmed'] = 1;
            $signature['remote_address'] = 'manual';
            $signature['date'] = REQUEST_TIME;
            $signature['position'] = $position;

            // INSERT DATA IN THE PETITION SIGNATURE TABLE, with an "OK STATEMENT" in the confirmed column.
            $id = db_insert('petition_signatures')
              ->fields(array(
                  'cid' => $signature['cid'],
                  'nid' => $node->nid,
                  'name' => $signature['name'],
                  'firstname' => $signature['firstname'],
                  'title' => $signature['title'],
                  'address' => $signature['address'],
                  'zip' => $signature['zip'],
                  'town' => $signature['town'],
                  'country' => $signature['country'],
                  'tel' => $signature['tel'],
                  'email' => $signature['email'],
                  'canbe_informed' => $signature['canbe_informed'],
                  'language' => $signature['language'],
                  'remote_address' => $signature['remote_address'],
                  'date' => $signature['date'],
                  'confirmed' => $signature['confirmed'],
                  'hash' => $signature['hash'],
                  'position' => $signature['position'],
                ))
              ->execute();
            drupal_set_message(t("Manual signature for @signature_name successfully entered in position @signature_position", array('@signature_name' => $signature['name'], '@signature_position' => $signature['position'])));
          }
        }
        $signature_count = db_query("SELECT COUNT(cid) FROM {petition_signatures} WHERE nid = :nid AND confirmed = :confirmed", array(':nid' => $node->nid, ':confirmed' => 1))->fetchField();
        db_update('petition')
          ->fields(array('signatures' => $signature_count))
          ->condition('nid', $node->nid)
          ->execute();
        drupal_set_message(t("There now are @signature_count for this petition", array('@signature_count' => $signature_count)));
      }
    }
  }
}

/**
 * Implements hook_delete().
 */
function petition_delete($node) {
  // Delete all the signatures related to the petition.
  petition_delete_but_not_signatures($node);
  db_delete('petition_signatures')
    ->condition('nid', $node->nid)
    ->execute();
  // if this is the original version, delete all the translations.
  if (is_numeric($node->tnid) AND $node->tnid = $node->nid) {
    $result = db_select('node', 'n')
      ->fields('n')
      ->condition('tnid', $node->nid)
      ->addTag('node_access')
      ->execute();
    while ($translation = $result->fetchObject()) {
      node_delete($translation->nid);
    }
  }
}

function petition_delete_but_not_signatures($node) {
  // Deletes all but not the signature: used for updates.
  db_delete('petition')
  ->condition('nid', $node->nid)
  ->execute();

  db_delete('petition_translation')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_update().
 */
function petition_update($node, $log = TRUE) {
  petition_delete_but_not_signatures($node);
  petition_insert($node, FALSE);
  if ($log) {
    watchdog('petition', 'Petition !node->title updated', array('!node->title' => $node->title), WATCHDOG_NOTICE);
  }
}

/**
 * Implements hook_validate().
 */
function petition_validate($node) {
  // checks the frequency is a number.
  if (isset($node->update_frequency) AND $node->update_frequency != '' AND !is_numeric($node->update_frequency)) {
    form_set_error('petition', t('The update frequency must be a number'));
  }

  if (!empty($node->maintainer_email) AND !valid_email_address($node->maintainer_email)) {
    form_set_error('petition', t('Please, use a valid email address.') . ((check_plain($node->maintainer_email) == '') ? '' : ' ' . t('Your current email address is: @email', array('@email' => check_plain($node->maintainer_email)))));
  }
  // Check the email body contains the @link.
  if (isset($node->email_body) AND (strpos($node->email_body, '@link') === FALSE)) {
    form_set_error('petition', t('Please, do not forget to place the @link in your email body'));
  }

  // Checks the signature goal is number.
  if (isset($node->signature_goal) AND $node->signature_goal != '' AND !is_numeric($node->signature_goal)) {
    form_set_error('petition', t('The signature goal must be a number - campaign settings'));
  }

  // Checks the limit date is a date.
  if (!empty($node->limit_date) && strtotime($node->limit_date) <= 0) {
    form_set_error('petition', t('You have to specify a valid limit date - campaign settings'));
  }

}

/**
 * Implements petition_link().
 */
function petition_link($type, $object, $teaser = FALSE) {
  $links = array();
  if (($type == 'node') AND $object->type == 'petition' && petition_signature_access($object)) {
    $links['signature_counts'] = array(
      'title' => format_plural($object->signatures, '1 signature', '@count signatures'),
      'href' => "node/$object->nid/signatures",
    );
  }
  return $links;
}


/**
 * Implements hook_view().
 */
function petition_view($node, $view_mode) {
  // IMPORTANT FOR TRANSLATION MODE. WE WANT THE SAME FORM TO APPLY FOR ALL THE TRANSLATIONS.
  if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
    $nid = $node->tnid;
  }
  else {
    $nid =  $node->nid;
  }

  // if a teaser, do not display the form
  if ($view_mode == 'teaser') {
    $body_teaser_markup = field_view_field('node', $node, 'body', array('type' => 'text_summary_or_trimmed'));
    $node->content['body'] = array(
      '#markup' => render($body_teaser_markup),
      '#weight' => 0,
    );
    return $node;
  }

  // DEFINE THE GLOBAL $_petition_form_list THAT WILL BE CALLED BY HOOK PETITION_FORMS.
  global $_petition_form_list;
  $_petition_form_list[] = $nid;

  $output = $node->activation ? drupal_get_form('petition_signature_form_' . $nid, $node) : check_markup($node->inactivation_message, $node->format, $node->language, FALSE);


  $body_full_markup = field_view_field('node', $node, 'body');
  $node->content['body'] = array(
    '#markup' => render($body_full_markup),
    '#weight' => 0,
  );
  if (user_access('sign petitions')) {
    $node->content['petition'] = array(
      '#markup' => drupal_render($output),
      '#weight' => 1,
    );
  }
  else {
    $node->content['petition'] = array(
      '#markup' => t('You are not allowed to sign this petition.'),
      '#weight' => 1,
    );
  }
  return $node;
}

/**
 * Implements $module_preprocess_node.
 */
function petition_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->type == 'petition') {
    // IMPORTANT FOR TRANSLATION MODE. WE WANT THE SAME FORM TO APPLY FOR ALL THE TRANSLATIONS
    if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
      $nid = $node->tnid;
    }
    else {
      $nid = $node->nid;
    }
  }

  // In case a themer wants to create a node-petition.tpl.php file and separate between the petition body and form.
  // The themer should use $petition_body and $petition_form instead of $content.
  // The themer can user $signature_count to refer to the amount of the gathered sigantures.
  if ($node->type == 'petition' && !$variables['teaser'] && isset($node->bodytext)) {
    $variables['petition_body'] = $node->bodytext;
    if (user_access('sign petitions')) {
      $variables['petition_form'] = drupal_get_form('petition_signature_form_' . $nid, $node);
    }
    else {
      $variables['petition_form'] = t('You are not allowed to sign this petition');
    }
  }

  if ($node->type == 'petition') {
    $variables['signature_count'] = $node->signatures;
    $variables['activation'] = $node->activation;
    $variables['inactivation_message'] = filter_xss($node->inactivation_message);
    $variables['limit_date'] = $node->limit_date;
    $variables['signature_goal'] = $node->signature_goal;
    $variables['campaign_settings'] = $node->campaign_settings;
  }
}

/**
 * Add a select form item to the given form to configure
 * the default petition node on the block configuration page
 */
function _petition_add_default_petition_form(&$form, $variable) {
  // Get the nid and title of all the petition nodes.
  $results = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'petiton')
    ->condition('status', 1)
    ->addTag('node_access')
    ->execute();
  $nids = array(0 => t('None'));
  $default_nid = 0;
  while ($n = $results->fetchObject()) {
    // Put the petition nids and titles into an array.
    $nids[$n->nid] = $n->title;
    if (variable_get($variable, 0) == $n->nid) {
      // Set default nid if old value is found.
      $default_nid = $n->nid;
    }
  }
  $form[$variable] = array(
    '#type' => 'select',
    '#title' => t('Default petition'),
    '#description' => t('Which petition to use when the block is not displayed on a petition node.'),
    '#options' => $nids,
    '#default_value' => $default_nid,
  );
}


/**
 * Implements hook_block_info().
 */
function petition_block_info() {
  $blocks['form']['info'] = t('Petition module - Signature Form');
  $blocks['all']['info'] = t('Petition module - All signatures');
  $blocks['lastx']['info'] = t('Petition module - Last x signatures');
  $blocks['initial']['info'] = t('Petition module - Initial signers');

  // Get the nid and title of all the petition nodes.
  $results = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'petition')
    ->condition('status', 1)
    ->addTag('node_access')
    ->execute();

  while ($node = $results->fetchObject()) {
    // Create a block for each petition node.
    $blocks[$node->nid]['info'] = t('Petition module - @title (node @nid)', array('@title' => $node->title, '@nid' => $node->nid));
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function petition_block_configure($delta) {
  $form = array();
  if ($delta == 'form') {
    _petition_add_default_petition_form($form, 'petition_form_default_node');
  }
  elseif ($delta == 'all') {
    _petition_add_default_petition_form($form, 'petition_all_default_node');
  }
  elseif ($delta == 'lastx') {
    $form['petition_last_x_to_show'] = array(
      '#type' => 'textfield',
      '#title' => t('Signatures to show'),
      '#description' => t('How many signatures to show in the block'),
      '#default_value' => variable_get('petition_last_x_to_show', '30'),
    );
    _petition_add_default_petition_form($form, 'petition_last_x_default_node');
  }
  elseif ($delta == 'initial') {
    $form['petition_initial_signers_to_show'] = array(
      '#type' => 'textfield',
      '#title' => t('Initial signers to show'),
      '#description' => t('How many initial signers to show in the block'),
      '#default_value' => variable_get('petition_initial_signers_to_show', '50'),
    );
    _petition_add_default_petition_form($form, 'petition_initial_default_node');
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function petition_block_save($delta, $edit) {
  if ($delta == 'form') {
    variable_set('petition_form_default_node', $edit['petition_form_default_node']);
  }
  elseif ($delta == 'all') {
    variable_set('petition_all_default_node', $edit['petition_all_default_node']);
  }
  elseif ($delta == 'lastx') {
    variable_set('petition_last_x_to_show', $edit['petition_last_x_to_show']);
    variable_set('petition_last_x_default_node', $edit['petition_last_x_default_node']);
  }
  elseif ($delta == 'initial') {
    variable_set('petition_initial_signers_to_show', $edit['petition_initial_signers_to_show']);
    variable_set('petition_initial_default_node', $edit['petition_initial_default_node']);
  }
}

/**
 * Implements hook_block_view().
 */
function petition_block_view($delta) {
  $block = array();

  // Display a specific petition node in the block, $delta is the nid.
  if (is_numeric($delta)) {
    if ($node = node_load($delta)) {
      if ($node->type == 'petition' && $node->status == 1) {
        $output = node_view($node, FALSE, FALSE, FALSE);
        $block['subject'] = t('Sign the petition!');
        $block['content'] = $output;
      }
    }
  }
  // Display a specific petition block.
  else {
    // Get the default petition node, 0 if none.
    $nid = variable_get('petition_form_default_node', 0);
    // Check whether this page is an active petition node.
    if ((arg(0) == 'node') && is_numeric(arg(1)) &&
            ($node = node_load(arg(1))) && ($node->type == 'petition') &&
            ($node->activation == '1')) {
      // Use the nid of the petition node.
      $nid = $node->nid;
    }
    if (!$nid) {
      // Show no block if no valid petition node found.
      return ($block);
    }
    $node = node_load($nid);
    if (!$node->nid || ($node->activation != '1')) {
      // Failed to load the node.
      if (!is_numeric($delta)) {
        return ($block);
      }
    }

    // IMPORTANT FOR TRANSLATION MODE. WE WANT THE SAME FORM TO APPLY FOR ALL THE TRANSLATIONS.
    if (is_numeric($node->tnid) && $node->tnid > 0 && $node->nid != $node->tnid) {
      $nid = $node->tnid;
    }
    else {
      $nid = $node->nid;
    }

    // Signature Form.
    if ($delta == 'form') {
      global $_petition_form_list;
      $_petition_form_list[] = $nid;
      $output = drupal_get_form('petition_signature_form_' . $nid, $node);
      $block['subject'] = t('Sign the petition!');
      $block['content'] = $output;
    }
    // All signatures.
    elseif ($delta == 'all') {
      // Show signatures, ordered by position.
      $display_modes = module_invoke_all('signaturedisplay_info');
      $output = call_user_func_array($display_modes[$node->display_mode]['callback'], array($node, 0, 'position ASC'));

      $block['subject'] = t('All signatures');
      $block['content'] = $output;
    }
    // Last x signatures.
    elseif ($delta == 'lastx') {
      // Show signatures, reverse-ordered by position.
      $display_modes = module_invoke_all('signaturedisplay_info');
      $output .= call_user_func_array($display_modes[$node->display_mode]['callback'], array($node, variable_get('petition_last_x_to_show', 50), 'position DESC'));

      $block['subject'] = t('Last @count signatures', array('@count' => variable_get('petition_last_x_to_show', 50)));
      $block['content'] = $output;
    }
    // Initial signers.
    elseif ($delta == 'initial') {
      // Get the number of initial signers.
      $initial_signers = db_query("SELECT COUNT(cid) FROM {petition_signatures} WHERE nid = :nid AND confirmed = :confirmed AND initial_signer = :initial_signer", array(':nid' => $node->nid, ':confirmed' => 1, ':initial_signer' => 1))->fetchField();
      if ($initial_signers > variable_get('petition_initial_signers_to_show', 50)) {
        // limit the displayed signatures to the configured number
        $initial_signers = variable_get('petition_initial_signers_to_show', 50);
      }
      // Show signatures, only initial_signers, ordered by position.
      $display_modes = module_invoke_all('signaturedisplay_info');
      $output = call_user_func_array($display_modes[$node->display_mode]['callback'], array($node, $initial_signers, 'initial_signer DESC, position ASC'));

      $block['subject'] = t('Initial signers');
      $block['content'] = $output;
    }
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function petition_theme() {
  return array(
    'default_signature_display' => array(
      'variables' => array('node' => NULL, 'show_signatures' => 0, 'shown_order' => NULL),
    ),
    'petition_admin_signatures' => array(
      'render element' => 'form',
    ),
  );
}

/*
 * Calls the chosen display mode.
 */
function petition_signature_page($node) {
  $display_modes = module_invoke_all('signaturedisplay_info');
  return call_user_func_array($display_modes[$node->display_mode]['callback'], array($node));
}

function default_signature_display($node, $show_signatures = 0, $show_order = NULL) {
  return theme('default_signature_display', array('node' => $node, 'show_signatures' => $show_signatures, 'shown_order' => $show_order));
}

/**
 * theme_default_signature_display.
 * @param $node,
 *  the node object of the petition of which we wish to display the signatures
 * @param $show_signatures
 * the number of signatures to show. 0 means to show all (default)
 * @param $show_order
 * whether to show the signatures in normal order (0, default) or in reverse order (1)
 * @return
 * a theme('pager', $output) where $output is a pager query of the signatures
 */
function theme_default_signature_display($variables) {
  $node = $variables['node'];
  $show_signatures = $variables['show_signatures'];
  $show_order = $variables['shown_order'];
  $max = variable_get('petition_signature_number', 50);
  // IMPORTANT FOR TRANSLATION MODE. WE WANT THE SIGNATURES TO APPEAR UNDER ALL THE TRANSLATIONS.
  if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
    $nid = $node->tnid;
  }
  else {
    $nid = $node->nid;
  }

  // Do not set page title, the signature might be displayed in a block on other pages.

  $fields = $node->display_fields;
  $field_array = array(
    'position' => t('#'),
    'name' => t('Surname'),
    'firstname' => t('First name'),
    'title' => t('Other (activity, status etc)'),
    'address' => t('Address'),
    'zip' => t('ZIP code'),
    'town' => t('Town'),
    'country' => t('Country'),
    'tel' => t('Phone number'),
    'email' => t('Email'),
    'canbe_informed' => t('Accept to be informed of the campaign'),
    'language' => t('language'),
    'profession' => t('Profession'),
    'institution' => t('Institution'),
    'website' => t('Website'),
    'comment' => t('Comment'),
  );

  $header = array();
  $query_fields = array();
  $i = 0;
  if (count($fields)) {
    foreach ($fields as $field) {
      if (!empty($field)) {
        $query_fields[] = $field;
        if (empty($show_order)) {
          // Let the users change sorting mode, make 'desc' the default for position, make 'asc' the default for other fields.
          if ($field == 'position') {
            $sort = 'desc';
          }
          else {
            $sort = 'asc';
          }

          $header[$i] = $i < 1 ? array(
            'data' => $field_array[$field],
            'field' => $field,
            'sort' => $sort,
          ) : array(
            'data' => $field_array[$field],
            'field' => $field,
          );
        }
        else {
          // Use the specified sorting mode.
          $header[$i] = array('data' => $field_array[$field]);
        }
        $i++;
      }
    }
  }

  $select = db_select('petition_signatures', 'ps')
    ->fields('ps', $query_fields)
    ->condition('ps.nid', $nid)
    ->condition('ps.confirmed', 1);

  $tablesort = '';
  if (!empty($show_order)) {
    $result = $select
      ->orderBy(check_plain($show_order))
      ->extend('PagerDefault')
      ->limit($max)
      ->execute();
  }
  else {
    $result = $select
      ->extend('TableSort')
      ->orderByHeader($header)
      ->extend('PagerDefault')
      ->limit($max)
      ->execute();
  }

  // $result = pager_query($sql . $tablesort, $max, 0, NULL, $nid);
  $rows = array();

  while ($signature = $result->fetchObject()) {
    $data_array = array();

    foreach ($query_fields as $field) {
      if (!empty($field) && isset($signature->$field)) {
        $data_array[] = check_plain($signature->$field);
      }
      else {
        $data_array[] = '';
      }
    }
    $rows[] = array('data' => $data_array);
    // Check whether the required number of signatures has been shown.
    if ($show_signatures > 0) {
      $show_signatures--;
      if ($show_signatures == 0) {
        break;
      }
    }
  }

  if (count($rows) == 0) {
    return t('There are no signatures for this petition');
  }
  else {
    $output = theme('table', array('header' => $header, 'rows' => $rows));
    $output .= theme('pager', array('tags' => NULL, 'element' => 0));
    return $output;
  }
}

/**
 * petition_result_page.
 * @param $node,
 * the node object of the petition of which we wish to display the signatures
 * @return
 * Download the result as a CSV (Comma Separated Value) file of the results of the petition.
 */
function petition_result_page($node) {
  // IMPORTANT FOR TRANSLATION MODE. WE WANT THE SIGNATURES TO APPEAR UNDER ALL THE TRANSLATIONS,
  // THOUGH IN PRACTICE, ONLY THE MAINTAINER OF THE ORIGINAL SHOULD BE ABLE TO EXPORT THE DATA.
  if (is_numeric($node->tnid) AND $node->tnid > 0 AND $node->nid != $node->tnid) {
    $nid = $node->tnid;
  }
  else {
    $nid = $node->nid;
  }

  $file_name = tempnam(file_directory_temp(), 'petition_node_signatures');
  $handle = @fopen($file_name, 'w'); // The @ supresses errors.

  $fields = variable_get('petition_report_fields_fields', array('name', 'firstname', 'title', 'zip', 'town', 'country'));
  $header = '';
  foreach ($fields as $field) {
    if ($header != '') {
      $header .= ', ';
    }
    $header .= '"' . $field . '"';
  }
  // Write header information.
  @fwrite($handle, $header . "\n");
  $signature_fields = implode(', ', $fields);

  $result = db_select('petition_signatures', 'ps')
    ->fields('ps', $fields)
    ->condition('ps.nid', $nid)
    ->condition('ps.confirmed', 1)
    ->execute();

  while ($line = $result->fetchObject()) {
    $row = '';
    foreach ($line as $cell) {
      if ($row != '') {
        $row .= ', ';
      }
      $row .= '"' . check_plain($cell) . '"';
    }
    // Write data from submissions.
    @fwrite($handle, $row . "\n");
  }

  // Close the file.
  @fclose($handle);

  drupal_add_http_header('Content-type', 'text/csv; charset=utf-8');
  drupal_add_http_header('Content-Disposition', "attachment; filename=" . preg_replace('/\.$/', '', str_replace(' ', '_', check_plain($node->title))) . ".csv");

  @readfile($file_name); // The @ makes it silent.
  @unlink($file_name); // Clean up, the @ makes it silent.
  exit(0);
}


/**
 * Implements hook_forms().
 */
function petition_forms($form_id, $args) {
  $forms = array();
  if (substr($form_id, 0, 24) == 'petition_signature_form_') {
    $forms[$form_id] = array(
      'callback' => 'petition_signature_form',
      'callback arguments' => $args,
    );
  }
  return $forms;
}

/**
 * petition_signature_form.
 * Signature form generation function.
 */
function petition_signature_form($form, &$form_state, $node) {
  global $user;

  // IMPORTANT FOR TRANSLATION MODE. WE WANT THE SAME FORM TO APPEAR UNDER EACH TRANSLATION.
  if (isset($node->tnid) && is_numeric($node->tnid) && $node->tnid > 0 && $node->nid != $node->tnid) {
    $nid = $node->tnid;
  }
  else {
    $nid = $node->nid;
  }

  $form['#submit'][] = 'petition_signature_form_submit';
  $form['#validate'][] = 'petition_signature_form_validate';

  // Determine required fields.
  $required = array(
    'name' => FALSE,
    'firstname' => FALSE,
    'title' => FALSE,
    'profession' => FALSE,
    'institution' => FALSE,
    'website' => FALSE,
    'address' => FALSE,
    'zip' => FALSE,
    'town' => FALSE,
    'country' => FALSE,
    'tel' => FALSE,
    'comment' => FALSE,
  );
  foreach ($node->required_fields as $field) {
    $required[$field] = TRUE;
  }

  $form['signature'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sign the petition!'),
    '#collapsible' => FALSE,
  );

  if (in_array('firstname', $node->optional_fields, TRUE)) {
    $form['signature']['firstname'] = array(
      '#type' => 'textfield',
      '#title' => t('First name'),
      '#maxlength' => 128,
      '#required' => $required['firstname'],
      '#weight' => 0,
    );
  }

  if (in_array('name', $node->optional_fields, TRUE)) {
    $form['signature']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Surname'),
      '#maxlength' => 128,
      '#required' => $required['name'],
      '#weight' => 1,
    );
  }

  if (in_array('title', $node->optional_fields, TRUE)) {
    $form['signature']['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Other (activity, status etc)'),
      '#maxlength' => 256,
      '#required' => $required['title'],
      '#weight' => 2,
    );
  }
  if (in_array('profession', $node->optional_fields, TRUE)) {
    $form['signature']['profession'] = array(
      '#type' => 'textfield',
      '#title' => t('Profession'),
      '#maxlength' => 256,
      '#required' => $required['profession'],
      '#weight' => 3,
    );
  }
  if (in_array('institution', $node->optional_fields, TRUE)) {
    $form['signature']['institution'] = array(
      '#type' => 'textfield',
      '#title' => t('Institution'),
      '#maxlength' => 256,
      '#required' => $required['institution'],
      '#weight' => 4,
    );
  }
  if (in_array('website', $node->optional_fields, TRUE)) {
    $form['signature']['website'] = array(
      '#type' => 'textfield',
      '#title' => t('Website'),
      '#maxlength' => 256,
      '#required' => $required['website'],
      '#weight' => 5,
    );
  }
  if (in_array('address', $node->optional_fields, TRUE)) {
    $form['signature']['address'] = array(
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#maxlength' => 300,
      '#required' => $required['address'],
      '#weight' => 6,
    );
  }
  if (in_array('zip', $node->optional_fields, TRUE)) {
    $form['signature']['zip'] = array(
      '#type' => 'textfield',
      '#title' => t('ZIP Code'),
      '#maxlength' => 10,
      '#required' => $required['zip'],
      '#weight' => 7,
    );
  }
  if (in_array('town', $node->optional_fields, TRUE)) {
    $form['signature']['town'] = array(
      '#type' => 'textfield',
      '#title' => t('Town'),
      '#maxlength' => 30,
      '#required' => $required['town'],
      '#weight' => 8,
    );
  }

  if (in_array('country', $node->optional_fields, TRUE)) {
    $form['signature']['country'] = array(
      '#type' => 'textfield',
      '#title' => t('Country'),
      '#maxlength' => 20,
      '#required' => $required['country'],
      '#weight' => 9,
    );
  }

  $form['signature']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#maxlength' => 50,
    '#required' => TRUE,
    '#weight' => 10,
  );


  if (in_array('tel', $node->optional_fields, TRUE)) {
    $form['signature']['tel'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone'),
      '#maxlength' => 17,
      '#required' => $required['tel'],
      '#weight' => 11,
    );
  }
  if (in_array('comment', $node->optional_fields, TRUE)) {
    $form['signature']['comment_filter'] = array(
      '#weight' => 12,
    );
    $form['signature']['comment_filter']['comment'] = array(
      '#type' => 'textformat',
      '#title' => t('Comment'),
      '#maxlength' => 256,
      '#required' => $required['comment'],
      '#format' => isset($node->comment_format) ? $node->comment_format : NULL,
    );
  }

  if (in_array('canbe_informed', $node->optional_fields, TRUE)) {
    $form['signature']['canbe_informed'] = array(
      '#type' => 'checkbox',
      '#title' => t('Be kept informed of the campaign'),
      '#description' => t('Check this box if you wish to receive updates about this petition campaign'),
      '#required' => $required['canbe_informed'],
      '#weight' => 15,
    );
  }

  $form['signature']['remote_address'] = array(
    '#type' => 'hidden',
    '#value' => $_SERVER['REMOTE_ADDR'],
  );
  $form['signature']['date'] = array(
    '#type' => 'hidden',
    '#value' => REQUEST_TIME,
  );

  $form['signature_details']['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  $form['signature_details']['language'] = array(
    '#type' => 'hidden',
    '#value' => $node->language,
  );

  $form['signature']['submitbutton'] = array(
    '#type' => 'submit',
    '#value' => t('Sign it!'),
    '#weight' => 1000,
  );

  return $form;
}

function petition_signature_form_validate($form, $form_state) {
  // The $nid is the nid of the original petition in case of translation.
  $nid = $form_state['values']['nid'];
  $remote_addr = $form_state['values']['remote_address'];
  $email = $form_state['values']['email'];
  $language = $form_state['values']['language'];

  $node = node_load($nid);

  // Check that no more than 5 unconfirmed signatures came from the same IP address.
  $count_addr = db_query("SELECT COUNT(cid) FROM {petition_signatures} WHERE nid = :nid AND remote_address = :remote_address AND confirmed = :confirmed", array(':nid' => $nid, ':remote_address' => $remote_addr, ':confirmed' => 0))->fetchField();
  if ($count_addr > 5) {
    form_set_error('signature', t('More than 5 signatures have been entered from your IP address and none of them have been confirmed. Please confirm the other signatures first'));
    watchdog("petition", "Suspicion of spam attempt from IP address: !remote_addr", array('!remote_addr' => $remote_addr));
  }

  if (!valid_email_address($email)) {
    form_set_error('petition', t('Please, use a valid email address.') . ((check_plain($email) == '') ? '' : ' ' . t('Your current email address is: @email', array('@email' => $email))));
  }

  $same_signature = db_query("SELECT cid FROM {petition_signatures} WHERE nid = :nid AND email = :email", array(':nid' => $nid, ':email' => $email));

  $same_signature = db_select('petition_signatures', 'ps')
    ->fields('ps', array('cid'))
    ->condition('ps.nid', $nid)
    ->condition('email', $email)
    ->countQuery()
    ->execute()
    ->fetchField();

  if ($same_signature > 0) {
    form_set_error('signature', t('Someone using the same email address has already signed the petition. You can only sign this petition once'));
  }
}

function petition_signature_form_submit($form, $form_state) {
  $signature = new stdClass();
  $signature->nid = $form_state['values']['nid'];
  $signature->name = isset($form_state['values']['name']) ? $form_state['values']['name'] : '';
  $signature->firstname = isset($form_state['values']['firstname']) ? $form_state['values']['firstname'] : '';
  $signature->title = isset($form_state['values']['title']) ? $form_state['values']['title'] : '';
  $signature->address = isset($form_state['values']['address']) ? $form_state['values']['address'] : '';
  $signature->zip = isset($form_state['values']['zip']) ? $form_state['values']['zip'] : '';
  $signature->town = isset($form_state['values']['town']) ? $form_state['values']['town'] : '';
  $signature->country = isset($form_state['values']['country']) ? $form_state['values']['country'] : '';
  $signature->tel = isset($form_state['values']['tel']) ? $form_state['values']['tel'] : '';
  $signature->email = isset($form_state['values']['email']) ? $form_state['values']['email'] : '';
  $signature->remote_address = isset($form_state['values']['remote_address']) ? $form_state['values']['remote_address'] : '';
  $signature->date = isset($form_state['values']['date']) ? $form_state['values']['date'] : '';
  $signature->confirmed = variable_get('petition_email_confirmation_required', TRUE) ? 0 : 1;
  $signature->language = isset($form_state['values']['language']) ? $form_state['values']['language'] : '';
  $signature->canbe_informed = isset($form_state['values']['canbe_informed']) ? $form_state['values']['canbe_informed'] : 0;
  $signature->profession = isset($form_state['values']['profession']) ? $form_state['values']['profession'] : '';
  $signature->institution = isset($form_state['values']['institution']) ? $form_state['values']['institution'] : '';
  $signature->website = isset($form_state['values']['website']) ? $form_state['values']['website'] : '';
  $signature->initial_signer = 0;
  $signature->comment = isset($form_state['values']['comment']) ? $form_state['values']['comment'] : '';
  $signature->comment_format = isset($form_state['values']['comment_format']) ? $form_state['values']['comment_format'] : 0;

  // Check that no one with the same email address has already signed the petition.
  $same_signature = db_query("SELECT cid FROM {petition_signatures} WHERE nid = :nid AND email = :email", array(':nid' => $signature->nid, ':email' => $signature->email));
  $same = array();
  while ($same_signature->fetchObject()) {
    $same[] = $same_signature->cid;
  }

  if (count($same) == 0) {
    // If the form was submitted from a translation, retrieve the nid of the translated version to send the email in the correct languge.
    if (empty($signature->language)) {
      $nid = $signature->nid;
    }
    else {
      $nid = db_query("SELECT nid FROM {petition_translation} WHERE tnid = :tnid AND language = :language", array(':tnid' => $signature->nid, ':language' => $signature->language))->fetchField();
    }
    // Load the petition node.
    $node = node_load($nid);
    // Get the cid.
    $signature->cid = db_query('SELECT MAX(cid) FROM {petition_signatures}')->fetchField() + 1;
    // Create a hash.
    $signature->hash = md5($signature->cid . $signature->email . $signature->cid . rand());
    // Check comment markup.
    $signature->comment = check_markup($signature->comment, $signature->comment_format);

    // Insert data into the petition_signatures table.
    $id = db_insert('petition_signatures')
      ->fields(array(
          ' cid' => $signature->cid,
          'nid' => $signature->nid,
          'name' => $signature->name,
          'firstname' => $signature->firstname,
          'title' => $signature->title,
          'address' => $signature->address,
          'zip' => $signature->zip,
          'town' => $signature->town,
          'country' => $signature->country,
          'tel' => $signature->tel,
          'email' => $signature->email,
          'canbe_informed' => $signature->canbe_informed,
          'language' => $signature->language,
          'remote_address' => $signature->remote_address,
          'date' => $signature->date,
          'confirmed' => $signature->confirmed,
          'hash' => $signature->hash,
          'profession' => $signature->profession,
          'institution' => $signature->institution,
          'website' => $signature->website,
          'comment' => $signature->comment,
          'comment_format' => $signature->comment_format,
          'initial_signer' => $signature->initial_signer,
        ))
      ->execute();

    // When confirmation is required, send an email with a unique link which when clicked on,
    // will call 'petition_confirmation_page', and replace the "NOT OK STATEMENT" with an "OK STATEMENT".
    if (variable_get('petition_email_confirmation_required', TRUE)) {
      $params['to'] = $signature->email;
      $link = url('petition/signature/confirmation/' . $signature->nid . '/' . $signature->cid . '/' . $signature->date . '/' . $signature->hash, array('absolute' => TRUE));
      $subject = empty($signature->language) ? $node->email_subject : $node->tsubjects[$signature->language];
      $subject = t($subject, array('@petitiontitle' => $node->title, '@firstname' => $signature->firstname, '@name' => $signature->name, '@link' => $link, '@site' => variable_get('site_name', 'localhost')));
      $params['subject'] = filter_xss($subject);
      $body = empty($signature->language) ? $node->email_body : $node->tbodies[$signature->language];
      $body = t($body, array('@petitiontitle' => $node->title, '@firstname' => $signature->firstname, '@name' => $signature->name, '@link' => $link, '@site' => variable_get('site_name', 'localhost')));
      $params['body'] = array(filter_xss($body));
      drupal_mail('petition', 'signature-confirm', $params['to'], language_default(), $params, variable_get('site_mail', NULL));
      drupal_set_message(t("Thank you for signing the petition. An email has been sent to you. Please click on the enclosed link within 3 days in order to confirm your signature"));
    }
    // When confirmation isn't required, set the position and show message.
    else {
      // Get the position of the new signature in the petition and save it.
      $position = db_query("SELECT MAX(position) FROM {petition_signatures} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
      $position += 1;

      db_update('petition_signatures')
        ->fields(array('position' => $position))
        ->condition('nid', $nid)
        ->condition('cid', $cid)
        ->condition('date', $date)
        ->condition('hash', $hash)
        ->execute();

      drupal_set_message(t("Thank you for signing the petition."));
    }
  }
}


/**
 * petition_confirmation_page.
 * function called when a "signer" clicks on the link included in the confirmation email they receive.
 * @param $nid,
 * nid of the petition the signature is associated with.
 * @param $cid,
 * cid of the signature.
 * @param $date
 * unix timestamp when the signature was submitted
 * @param $hash
 * unique hash associated with the signature
 * @return
 * remove the not ok statement on the concerned signature.
 * Send a message to the petition maintainer if the signature is the nth one.
 */


function petition_confirmation_page($nid, $cid, $date, $hash) {
  $node = node_load($nid);
  if ($node->display_mode == '0none') {
    $url = 'node/' . $nid;
  }
  else {
    $url = 'node/' . $nid . '/signatures';
  }

  $author = user_load($node->uid);

  // Check for a signature.
  $result = db_query("SELECT confirmed FROM {petition_signatures} WHERE nid = :nid AND cid = :cid AND date = :date AND hash = :hash", array(':nid' => $nid, ':cid' => $cid, ':date' => $date, ':hash' => $hash));

  // If we found a signature...
  if ($signature = $result->fetchObject()) {
    // ...check if it's been confirmed already.
    if ($signature->confirmed) {
      drupal_set_message(t("Thank you. You have already confirmed your signature for @petiton_title", array('@petition_title' => $node->title)));
      drupal_goto($url);
      return;
    }
    // Otherwise we have an unconfirmed signature and it will fall through to the update.
  }
  // Otherwise signature not found.
  else {
    drupal_set_message(t("Oops! Your signature cannot be confirmed.  Either the time for confirming your signature has elapsed or something is wrong with your confirmation link.  Please sign this petition again."));
    drupal_goto($url);
    return;
  }

  // Mark the signature as confirmed.
  db_update('petition_signatures')
    ->fields(array('confirmed' => 1))
    ->condition('nid', $nid)
    ->condition('cid', $cid)
    ->condition('date', $date)
    ->condition('hash', $hash)
    ->execute();

  // Count the number of confirmed signatures for the petition.
  $signature_count = db_select('petition_signatures', 'ps')
    ->fields('ps', array('cid'))
    ->condition('ps.nid', $nid)
    ->condition('ps.confirmed', 1)
    ->countQuery()
    ->execute()
    ->fetchField();

  db_update('petition')
    ->fields(array('signatures' => $signature_count))
    ->condition('nid', $nid)
    ->execute();

  // Get the position of the new signature in the petition and insert it.
  $position = db_query("SELECT MAX(position) FROM {petition_signatures} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
  $position += 1;

  db_update('petition_signatures')
    ->fields(array('position' => $position))
    ->condition('nid', $nid)
    ->condition('cid', $cid)
    ->condition('date', $date)
    ->condition('hash', $hash)
    ->execute();


  // If yes, send an email to inform the petition maintainer of the number of signatures.
  if (is_numeric($node->update_frequency) AND ($node->update_frequency > 0) AND ($signature_count % $node->update_frequency == 0)) {
    $author = user_load($node->uid);
    $maintainer = $author->name;
    $params['to'] = !valid_email_address($node->maintainer_email) ? $author->mail : $node->maintainer_email;
    $defaultsubject = _petition_getdefault("update_email_subject");
    $subject = variable_get('petition_emailsubject_to_maintainer', $defaultsubject);
    $subject = t($subject, array('@petitiontitle' => $node->title, '@number' => $signature_count, '@maintainer' => $maintainer, '@site' => variable_get('site_name', 'localhost')));
    $params['subject'] = filter_xss($subject);
    $defaultbody = _petition_getdefault("update_email_body");
    $body = variable_get('petition_emailsubject_to_maintainer', $defaultbody);
    $body = t($body, array('@petitiontitle' => $node->title, '@number' => $signature_count, '@maintainer' => $maintainer, '@site' => variable_get('site_name', 'localhost')));
    $params['body'] = array(filter_xss($body));
    drupal_mail('petition', 'frequency-update', $params['to'], language_default(), $params, variable_get('site_mail', NULL));
  }

  // Redirect the signer to the page with all the signatures.
  // As the nid is the nid of the original version, we determine if the petitioner has a preferred language. If yes, we find the nid of the translated version.
  $language = db_select('petition_signatures', 'ps')
    ->fields('ps', array('language'))
    ->condition('ps.nid', $nid)
    ->condition('ps.cid', $cid)
    ->condition('ps.date', $date)
    ->condition('ps.hash', $hash)
    ->execute()
    ->fetchField();

  if (!empty($language)) {
    $nid = db_select('petition_translation', 'pt')
      ->fields('pt', array('nid'))
      ->condition('pt.tnid', $nid)
      ->condition('pt.language', $language)
      ->execute()
      ->fetchField();
  }
  // Empty the cache before routing to the result page.
  cache_clear_all();
  drupal_set_message(t("Your signature has been confirmed. Thank you for signing the petition @petition_title.", array('@petition_title' => $node->title)));
  drupal_goto($url);
}

function petition_clear_signatures($node) {
  $output = drupal_get_form('clear_signature_form', $node);
  return $output;
}

function clear_signature_form($form, $form_state, $node) {
  $form['#submit'][] = 'clear_signature_form_submit';
  $form['#validate'][] = 'clear_signature_form_validate';
  $form['clear_signature']['confirmation_clear'] = array(
    '#type' => 'checkbox',
    '#title' => t('Confirmation'),
    '#return_value' => 1,
    '#default_value' => 0,
    '#description' => t("Please, confirm you want to delete all the signatures before clicking on submit"),
    '#weight' => 2,
  );
  $form['clear_signature']['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['clear_signature']['submitbutton'] = array(
    '#type' => 'submit',
    '#value' => t('Delete all the signatures!'),
    '#weight' => 1000,
  );
  return $form;
}

function clear_signature_form_validate($form, $form_state) {
  $nid = $form_state['values']['nid'];
  $confirm = $form_state['values']['confirmation_clear'];
  if ($confirm != 1) {
    form_set_error('clear_signature', t('Please, check the box to confirm you want to delete all the signatures'));
  }
}

function clear_signature_form_submit($form, $form_state) {
  $nid = $form_state['values']['nid'];
  // Remove all the signatures from a petition.
  db_delete('petition_signatures')
  ->condition('nid', $nid)
  ->execute();
  drupal_set_message(t('All the signatures have been removed.'));
}


/**
 * Implements hook_mail().
 */
function petition_mail($key, &$message, $params) {
  switch ($key) {
    case 'signature-confirm':
      $message['to'] = $params['to'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
    case 'frequency-update':
      $message['to'] = $params['to'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
    case 'campaign-over':
      $message['to'] = $params['to'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_cron().
 */
function petition_cron() {
  // Delete all unconfirmed signatures older than 3 days.
  $three_days_ago = REQUEST_TIME - (3 * 24 * 3600);
  db_delete('petition_signatures')
  ->condition('date', $three_days_ago, '<')
  ->condition('confirmed', 0)
  ->execute();

  // For each petition with campaign settings enabled, check if the campaign is over.
  $result = db_select('petition', 'p')
    ->fields('p')
    ->condition('p.campaign_settings', 0, '>')
    ->condition('p.activation', 0, '>')
    ->execute();

  while ($petition = $result->fetchObject()) {
    if (($petition->campaign_settings == 2 && $petition->signatures >= $petition->signature_goal) || ($petition->campaign_settings == 1 && REQUEST_TIME >= $petition->limit_date)) {
      // If the campaign is over, send an email.
      $node = node_load($petition->nid);
      $author = user_load($node->uid);
      $maintainer = $author->name;
      $params['to'] = !valid_email_address($petition->pemail) ? $author->mail : $petition->pemail;
      $defaultsubject = _petition_getdefault("campaign_is_over_email_subject");
      $subject = variable_get('campaign_emailsubject_to_maintainer', $defaultsubject);
      $subject = t($subject, array('@petitiontitle' => $node->title, '@number' => $petition->signatures, '@maintainer' => $maintainer, '@site' => variable_get('site_name', 'localhost')));
      $params['subject'] = filter_xss($subject);
      $defaultbody = _petition_getdefault("campaing_is_over_email_body");
      $body = variable_get('campaign_emailbody_to_maintainer', $defaultbody);
      $body = t($body, array('@petitiontitle' => $node->title, '@number' => $petition->signatures, '@maintainer' => $maintainer, '@site' => variable_get('site_name', 'localhost')));
      $params['body'] = array(filter_xss($body));
      drupal_mail('petition', 'campaign-over', $params['to'], language_default(), $params, variable_get('site_mail', NULL));

      // Function to inactivate the form.
      if ($petition->auto_inactivation > 0) {
        db_update('petition')
          ->fields(array('activation' => 0))
          ->condition('nid', $petition->nid)
          ->execute();
      }
    }
  }
}

/**
 * Helper function to return the default subjects and bodies of emails
 */

function _petition_getdefault($id) {
  switch ($id) {
    case "confirmation_email_subject":
      return t("Please confirm your signature for the petition '@petitiontitle'.");

    case "confirmation_email_body":
      return t("Thank you for supporting the petition @petitiontitle with your signature. Please confirm your signature by clicking on the following link within the 3 days you have received this email:\n\n   @link \n\nOnce you have confirmed your signature, your IP address will be erased from the database, which will guarantee your privacy.");

    case "update_email_subject":
      return t("Your petition @petitiontitle : @number signatures gathered so far");

    case "update_email_body":
      return t("Dear @maintainer, \n\n Your petition @petitiontitle online on @site has gathered @number signatures so far. \n\n Best regards, \n\n @site 's team");

    case "campaign_is_over_email_subject":
      return t("Your petition @petitiontitle : the campaign is over");

    case "campaing_is_over_email_body":
      return t("Dear @maintainer, \n\nYour petition @petitiontitle online on @site has gathered @number signatures.\nThe campaign is considered over according the criteria you chose. if you have chosen to have the petition form automatically inactivated, the petition is now closed. You can however change these settings manually.\n\n Best regards, \n\n @site 's team");

    case "description_confirmation_mail":
      return t("You can use the placeholders '@petitiontitle' for the petition title, '@firstname' for the petitioner's firstname, '@name' for the petitioner's name, '@link' for the confirmation link (if you do not include the link, the petitioner will be unable to confirm his signature) and '@site' for the site");

    case "description_maintainer_mail":
      return t('You can use the placeholders "@petitiontitle" for the petition title, "@number" for the number of signatures, "@maintainer" for the petition author, "@site" for the site');
  }
}
